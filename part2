library(shiny)
library(lpSolve)
library(purrr)
library(shinyjs)
library(aws.s3)
library(aws.signature)
library(uuid)

# Replace "your_access_key_id" and "your_secret_access_key" with your actual AWS credentials
Sys.setenv("AWS_ACCESS_KEY_ID" = "")
Sys.setenv("AWS_SECRET_ACCESS_KEY" = "")
Sys.setenv("AWS_DEFAULT_REGION" = "")

# Define the UI for the app
ui <- fluidPage(
  useShinyjs(),
  titlePanel("Fantasy Football Lineup Optimizer"),
  
  sidebarLayout(
    sidebarPanel(
      textInput("input_uuid", "Enter your UUID:"),
      actionButton("load_data", "Load Data"),
      hr(),
      conditionalPanel(
        condition = "input.load_data > 0",
        numericInput("num_qb", "Enter the number of QBs:", 1, min = 1, max = 5),
        numericInput("num_rb", "Enter the number of RBs:", 2, min = 1, max = 5),
        numericInput("num_wr", "Enter the number of WRs:", 2, min = 1, max = 5),
        numericInput("num_te", "Enter the number of TEs:", 1, min = 1, max = 5),
        numericInput("num_value", "Enter your draft budget:", 200),
        numericInput("num_players", "Adding in your flex spots, enter the total number of starters:", 9, min = 1, max = 15),
        actionButton("set_const", "Set Draft Constraints"),
        
        # Remove the `as.character(players$Player)` from the choices argument
        selectInput("remove", "Remove a player:", choices = c(""), multiple = FALSE),
        selectInput("draft_player", "Draft Player", choices = c(""), multiple = FALSE),
        
        actionButton("update", "Update Lineup")
      )
    ),
    mainPanel(
      tableOutput("team")
    )
  )
)


# Define the server logic
server <- function(input, output, session) {
  #XXXXXXXX
  rv <- reactiveValues(players = NULL, draftedPlayers = data.frame())
  
  observeEvent(input$load_data, {
    if (input$input_uuid == "") {
      showModal(modalDialog(
        title = "Warning",
        "Please enter a UUID before loading data.",
        easyClose = TRUE
      ))
    } else {
      # Create a user-specific object name
      user_object <- paste0(input$input_uuid, "_players.csv")
      
      # Download the Players dataset from Amazon S3 to a temporary file
      temp_file <- tempfile(fileext = ".csv")
      aws.s3::save_object(object = user_object, bucket = "optimizedraftfantasy", file = temp_file)
      
      # Read the Players dataset from the temporary file
      players <- read.csv(temp_file, stringsAsFactors = FALSE)
      
      # Clean up the temporary file
      unlink(temp_file)
      
      rv$players <- players
      
      # New col to indicate if a player has been drafted
      rv$players$Drafted = "No"
      
      # Create a new column indicating the player's position
      rv$players$QB <- ifelse(rv$players$Position == "QB", 1, 0)
      rv$players$RB <- ifelse(rv$players$Position == "RB", 1, 0)
      rv$players$WR <- ifelse(rv$players$Position == "WR", 1, 0)
      rv$players$TE <- ifelse(rv$players$Position == "TE", 1, 0)
      rv$players$Total <- 1
      updateSelectInput(session, inputId = "remove", choices = c("", rv$players$Player), selected = "")
      updateSelectInput(session, inputId = "draft_player", choices = c("", rv$players$Player), selected = "")
      
      disable(id = "load_data")
      disable(id = "input_uuid")
      enable(selector = "input[type = 'number']")
      enable(id = "set_const")
      enable(id = "remove")
      enable(id = "draft_player")
      enable(id = "update")
    }
  }, ignoreNULL = FALSE)
  
  # Set up reactive table for lineup output
  updateLineup = reactiveVal(NULL)
  
  # Define the objective function (maximize fantasy points)
  obj <- reactive({ rv$players$FantasyPoints })
  
  # Define the constraints (position limits and draft value limit)
  con <- reactive({
    if (is.null(rv$players)) return(NULL)
    matrix(c(
      # Position constraint
      rv$players$QB,
      rv$players$RB,
      rv$players$WR,
      rv$players$TE,
      # Flex constraints
      rv$players$RB,
      rv$players$WR,
      rv$players$TE,
      # Total players constraint
      rv$players$Total,
      # Draft value constraint
      rv$players$DraftValue
    ), ncol = nrow(rv$players), byrow = TRUE)
  })
  
  # Define the variables for the lp
  dir <- c("<=", rep(">=", 3), rep("<=", 3), "==", "<=")
  
  # Define num of flex spots
  flex_spots = reactive(input$num_players - sum(input$num_qb, input$num_rb, input$num_wr, input$num_te))
  
  # Define initial 'const.rhs'
  init_rhs <- reactive({
    list(
      QB = input$num_qb,
      RB = input$num_rb,
      WR = input$num_wr,
      TE = input$num_te,
      RB_flex = input$num_rb + flex_spots(),
      WR_flex = input$num_wr + flex_spots(),
      TE_flex = input$num_te + flex_spots(),
      n_players = input$num_players,
      n_val = input$num_value
    )
  })
  # Define reactive 'const.rhs'
  rhs = reactiveValues(const = list())
  
  # Define the initial optimal lineup
  initialLineup <- reactive({
    if (is.null(rv$players)) return(NULL)
    result <- lp("max", obj(), con(), dir, init_rhs(), all.bin = TRUE)
    rv$players[result$solution == 1,]
  })
  
  # Set constraints and disable draft inputs
  observeEvent(input$set_const, {
    disable(selector = "input[type = 'number']")
    disable(id = "set_const")
    rhs$const = init_rhs()
  })
  
  # Define the function to run when the "update" button is pressed
  observeEvent(input$update, {
    if (input$set_const == 0) { stop("Please set draft constraints first") }
    if (is.null(rv$players)) return(NULL)
    
    # Remove player here
    if (input$remove != "") {
      removedPlayer <- input$remove
      rv$players <- rv$players[rv$players$Player != removedPlayer,]
      obj <- rv$players$FantasyPoints
    }
    # Draft player
    if (input$draft_player != "") {
      draftedPlayer <- input$draft_player
      draftedPlayer_details <- rv$players[rv$players$Player == draftedPlayer,]
      draftedPlayer_details$Drafted = "Yes"
      rv$players <- rv$players[rv$players$Player != draftedPlayer,]
      rv$draftedPlayers <- rbind(rv$draftedPlayers, draftedPlayer_details)
      obj <- rv$players$FantasyPoints
      
      # Subtract constraints: position and n_players by 1 and draft budget by the players 'DraftValue'
      rhs$const = purrr::imap(rhs$const, function(cs, nm) {
        if (nm == draftedPlayer_details$Position) {cs = cs - 1}
        if (nm == "n_players") {cs = cs - 1}
        if (nm == "n_val") {cs = cs - draftedPlayer_details$DraftValue}
        return(cs)
      })
    }
    
    # Update select inputs to remove players after "Update Lineup" is clicked
    if (input$remove != "" || input$draft_player != "") {
      updateSelectInput(session, inputId = "remove", choices = c("", rv$players$Player), selected = "")
      updateSelectInput(session, inputId = "draft_player", choices = c("", rv$players$Player), selected = "")
    }
    
    # Define result with updated arguments
    result <- lp("max", obj(), con(), dir, rhs$const, all.bin = TRUE)
    # Assign new table to the reactiveVal 'updateLineup'
    updateLineup(rbind(rv$draftedPlayers, rv$players[result$solution == 1,]))
  })
  
  output$team <- renderTable({
    if (input$update == 0) {
      initialLineup()[, c("Player", "Position", "FantasyPoints", "DraftValue", "Drafted")]
    } else {
      updateLineup()[, c("Player", "Position", "FantasyPoints", "DraftValue", "Drafted")]
    }
  })
}
# Run the app
shinyApp(ui, server)
